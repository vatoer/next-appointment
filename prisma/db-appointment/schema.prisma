generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id           String        @id @default(cuid())
  name         String
  description  String?
  filledForms  FilledForm[]
  serviceForms ServiceForm[]
}

model FilledForm {
  id              String        @id @default(uuid())
  formId          String
  bookedServiceId String
  bookedService   BookedService @relation(fields: [bookedServiceId], references: [id])
  formDataJson    Json
  status          String        @default("draft")
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  form            Form          @relation(fields: [formId], references: [id])

  @@unique([formId, bookedServiceId])
}

model BookedService {
  id              String       @id @default(uuid())
  code            String?
  appointmentDate DateTime?
  serviceId       String
  service         Service      @relation(fields: [serviceId], references: [id])
  status          String?
  createdBy       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  filledForms     FilledForm[]
}

model Service {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  serviceRequirements ServiceRequirement[]
  bookedServices      BookedService[]
  serviceForms        ServiceForm[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  categoryId          String?
}

model Category {
  id       String    @id @default(cuid())
  name     String
  services Service[]
}

model ServiceForm {
  formId    String
  serviceId String
  formOrder Int?
  form      Form    @relation(fields: [formId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([formId, serviceId])
}

model ServiceRequirement {
  id                             String                          @id @default(uuid())
  name                           String
  type                           String
  required                       Boolean                         @default(false)
  description                    String?
  serviceId                      String
  service                        Service                         @relation(fields: [serviceId], references: [id])
  serviceRequirementTranslations ServiceRequirementTranslation[]
}

model ServiceRequirementTranslation {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  language             String
  locale               String?
  serviceRequirementId String
  serviceRequirement   ServiceRequirement @relation(fields: [serviceRequirementId], references: [id])
}
