generator client {
  provider = "prisma-client-js"
  //output   = "./generated/client"
  output   = "../../node_modules/@prisma-appointmendDb/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FormStatus {
  DRAFT
  CONFIRMED

  @@map("form_status")
}

enum StepName {
  INIT
  FORM_FILLING
  FORM_CONFIRMATION
  DOCUMENT_UPLOAD
  APPOINTMENT
  VISIT
  PAYMENT
  PROCESSING
  COMPLETED
  REJECTED
  NEEDS_MORE_INFO

  @@map("step_names")
}

model Form {
  id           String        @id @default(cuid())
  name         String
  description  String?
  filledForms  FilledForm[]
  serviceForms ServiceForm[]

  @@map("forms")
}

model FilledForm {
  id              String        @id @default(uuid())
  formId          String        @map("form_id")
  bookedServiceId String        @map("booked_service_id")
  bookedService   BookedService @relation(fields: [bookedServiceId], references: [id])
  formDataJson    Json          @map("form_data_json")
  status          FormStatus    @default(DRAFT)
  createdBy       String        @map("created_by")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  form            Form          @relation(fields: [formId], references: [id])

  @@unique([formId, bookedServiceId])
  @@map("filled_forms")
}

model BookedService {
  id              String       @id @default(uuid())
  code            String?
  appointmentDate DateTime?    @map("appointment_date")
  serviceId       String       @map("service_id")
  service         Service      @relation(fields: [serviceId], references: [id])
  status          StepName     @default(FORM_FILLING)
  createdBy       String       @map("created_by")
  user            User         @relation(fields: [createdBy], references: [id])
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime?    @updatedAt @map("updated_at")
  filledForms     FilledForm[]
  bookedSteps     BookedStep[]

  @@map("booked_services")
}

model Service {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  serviceRequirements ServiceRequirement[]
  bookedServices      BookedService[]
  serviceForms        ServiceForm[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  categoryId          String?              @map("category_id")
  steps               Step[]

  @@map("services")
}

model Step {
  id          Int          @id @default(autoincrement())
  name        StepName     @default(FORM_FILLING)
  description String
  sequence    Int
  createdAt   DateTime     @default(now()) @map("created_at")
  serviceId   String       @map("service_id")
  service     Service      @relation(fields: [serviceId], references: [id])
  bookedSteps BookedStep[]

  @@unique([serviceId, sequence])
  @@unique([serviceId, name])
  @@map("steps")
}

model BookedStep {
  id              Int           @id @default(autoincrement())
  completedAt     DateTime?     @map("completed_at")
  stepId          Int           @map("step_id")
  step            Step          @relation(fields: [stepId], references: [id])
  bookedServiceId String        @map("booked_service_id")
  bookedService   BookedService @relation(fields: [bookedServiceId], references: [id])

  @@unique([stepId, bookedServiceId])
  @@map("booked_steps")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  services  Service[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("categories")
}

model ServiceForm {
  formId    String  @map("form_id")
  serviceId String  @map("service_id")
  formOrder Int?    @map("form_order")
  form      Form    @relation(fields: [formId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([formId, serviceId])
  @@map("service_forms")
}

model ServiceRequirement {
  id                             String                          @id @default(uuid())
  name                           String
  type                           String
  required                       Boolean                         @default(false)
  description                    String?
  serviceId                      String                          @map("service_id")
  service                        Service                         @relation(fields: [serviceId], references: [id])
  serviceRequirementTranslations ServiceRequirementTranslation[]

  @@map("service_requirements")
}

model ServiceRequirementTranslation {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  language             String
  locale               String?
  serviceRequirementId String             @map("service_requirement_id")
  serviceRequirement   ServiceRequirement @relation(fields: [serviceRequirementId], references: [id])

  @@map("service_requirement_translations")
}

// Model definitions for authentication
// These should be moved to a separate file in the future
// to keep the schema clean and organized
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#model-files
// but for now, we'll keep them here for simplicity and ease of use
// and prisma seems to have a bug with multiple schema files

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  password       String?
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  accounts       Account[]
  sessions       Session[]
  bookedServices BookedService[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
