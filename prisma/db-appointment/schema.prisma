generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FormStatus {
  DRAFT
  FINAL
}

enum StepName {
  INIT
  FORM_FILLING
  FORM_CONFIRMATION
  APPOINTMENT
  DOCUMENT_UPLOAD
  VISIT
  PAYMENT
  PROCESSING
  COMPLETED
  REJECTED
  NEEDS_MORE_INFO
}

model Form {
  id           String        @id @default(cuid())
  name         String
  description  String?
  filledForms  FilledForm[]
  serviceForms ServiceForm[]
}

model FilledForm {
  id              String        @id @default(uuid())
  formId          String
  bookedServiceId String
  bookedService   BookedService @relation(fields: [bookedServiceId], references: [id])
  formDataJson    Json
  status          FormStatus    @default(DRAFT)
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime?     @updatedAt
  form            Form          @relation(fields: [formId], references: [id])

  @@unique([formId, bookedServiceId])
}

model BookedService {
  id              String       @id @default(uuid())
  code            String?
  appointmentDate DateTime?
  serviceId       String
  service         Service      @relation(fields: [serviceId], references: [id])
  status          StepName     @default(FORM_FILLING)
  createdBy       String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  filledForms     FilledForm[]
  BookedStep      BookedStep[]
}

model Service {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  serviceRequirements ServiceRequirement[]
  bookedServices      BookedService[]
  serviceForms        ServiceForm[]
  category            Category?            @relation(fields: [categoryId], references: [id])
  categoryId          String?
  steps               Step[]
}

model Step {
  id          Int          @id @default(autoincrement())
  name        StepName     @default(FORM_FILLING)
  description String
  sequence    Int
  createdAt   DateTime     @default(now())
  serviceId   String
  service     Service      @relation(fields: [serviceId], references: [id])
  bookedSteps BookedStep[]

  @@unique([serviceId, sequence])
  @@unique([serviceId, name])
}

model BookedStep {
  id              Int           @id @default(autoincrement())
  completedAt     DateTime?
  stepId          Int
  step            Step          @relation(fields: [stepId], references: [id])
  bookedServiceId String
  bookedService   BookedService @relation(fields: [bookedServiceId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  services Service[]
}

model ServiceForm {
  formId    String
  serviceId String
  formOrder Int?
  form      Form    @relation(fields: [formId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([formId, serviceId])
}

model ServiceRequirement {
  id                             String                          @id @default(uuid())
  name                           String
  type                           String
  required                       Boolean                         @default(false)
  description                    String?
  serviceId                      String
  service                        Service                         @relation(fields: [serviceId], references: [id])
  serviceRequirementTranslations ServiceRequirementTranslation[]
}

model ServiceRequirementTranslation {
  id                   String             @id @default(uuid())
  name                 String
  description          String?
  language             String
  locale               String?
  serviceRequirementId String
  serviceRequirement   ServiceRequirement @relation(fields: [serviceRequirementId], references: [id])
}

// Model definitions for authentication
// These should be moved to a separate file in the future
// to keep the schema clean and organized
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model#model-files
// but for now, we'll keep them here for simplicity and ease of use
// and prisma seems to have a bug with multiple schema files

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
